import discord
from discord.ext import commands
import random
import json

TOKEN = "MTMzNDM4NTk1NDI0NDM5NTAxOQ.GeUtz5.3-gNgDi9fBD-xGsSPTFYrR-Hq6TODikf3QF9Gw"

intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True
intents.dm_messages = True  # DM 기능 활성화

bot = commands.Bot(command_prefix="!", intents=intents)

# 복권 데이터 저장 (JSON 파일 사용)
LOTTERY_FILE = "lottery.json"
TOTAL_TICKETS = 100  # 복권 번호 범위 (1~100)

# 데이터 로드 함수
def load_data():
    try:
        with open(LOTTERY_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# 데이터 저장 함수
def save_data(data):
    with open(LOTTERY_FILE, "w") as f:
        json.dump(data, f, indent=4)

# 사용된 모든 복권 번호 가져오기
def get_used_numbers(data):
    return {num for tickets in data.values() for num in tickets}

# 복권 지급 명령어 (번호 선택 가능, DM 전송)
@bot.command()
async def 복권지급(ctx, member: discord.Member, number: int = None):
    data = load_data()
    user_id = str(member.id)

    if user_id not in data:
        data[user_id] = []

    if len(data[user_id]) >= 5:
        await ctx.send(f"{member.mention} 님은 이미 최대 5장의 복권을 보유하고 있습니다!")
        return

    used_numbers = get_used_numbers(data)

    # 번호를 입력하지 않은 경우 자동 번호 배정
    if number is None:
        available_numbers = list(set(range(1, TOTAL_TICKETS + 1)) - used_numbers)
        if not available_numbers:
            await ctx.send("모든 복권 번호가 이미 사용되었습니다! 😥")
            return
        number = random.choice(available_numbers)

    # 이미 사용된 번호인지 확인
    if number in used_numbers:
        await ctx.send(f"❌ {number}번은 이미 사용 중입니다! 다른 번호를 선택해주세요.")
        return

    data[user_id].append(number)
    save_data(data)

    # DM으로 복권 번호 전송
    try:
        await member.send(f"🎟️ [디스코드 복권 알림] 🎟️\n\n"
                          f"✅ {member.display_name} 님의 복권 번호: **{number}**\n"
                          f"📢 추첨 날짜: 매월 말일!\n"
                          f"🔗 당첨 결과는 서버에서 확인하세요!")
        await ctx.send(f"{member.mention} 님의 복권 번호가 **DM으로 전송되었습니다!** ✉️")
    except discord.Forbidden:
        await ctx.send(f"❌ {member.mention} 님의 DM이 차단되어 있어 복권 번호를 전송할 수 없습니다! "
                       f"서버 채팅에서 `!복권확인` 명령어를 사용해 주세요.")

# 복권 확인 명령어 (DM으로 전송)
@bot.command()
async def 복권확인(ctx, member: discord.Member = None):
    data = load_data()
    member = member or ctx.author
    user_id = str(member.id)

    if user_id in data and data[user_id]:
        tickets = ", ".join(map(str, sorted(data[user_id])))
        try:
            await member.send(f"🎟️ [디스코드 복권 확인] 🎟️\n\n"
                              f"✅ {member.display_name} 님의 보유 복권 번호: **{tickets}**\n"
                              f"📢 추첨 날짜: 매월 말일!\n"
                              f"🔗 당첨 결과는 서버에서 확인하세요!")
            await ctx.send(f"{member.mention} 님의 복권 번호가 **DM으로 전송되었습니다!** ✉️")
        except discord.Forbidden:
            await ctx.send(f"❌ {member.mention} 님의 DM이 차단되어 있어 복권 번호를 확인할 수 없습니다! "
                           f"서버에서 `!복권확인` 명령어를 다시 사용해 주세요.")
    else:
        await ctx.send(f"{member.mention} 님은 아직 복권이 없습니다!")

# 복권 추첨 명령어
@bot.command()
async def 복권추첨(ctx):
    data = load_data()
    if not data:
        await ctx.send("아직 복권을 가진 유저가 없습니다!")
        return

    all_tickets = [(user, ticket) for user, tickets in data.items() for ticket in tickets]
    winners = random.sample(all_tickets, min(3, len(all_tickets)))

    winner_msgs = [
        f"🥇 **1등:** <@{winners[0][0]}> 🎟️ {winners[0][1]}",
        f"🥈 **2등:** <@{winners[1][0]}> 🎟️ {winners[1][1]}" if len(winners) > 1 else "",
        f"🥉 **3등:** <@{winners[2][0]}> 🎟️ {winners[2][1]}" if len(winners) > 2 else "",
    ]
    
    await ctx.send("🎰 **복권 추첨 결과 발표!** 🎰\n" + "\n".join(winner_msgs))

# 복권 시뮬레이션 명령어
@bot.command()
async def 복권시뮬레이션(ctx):
    data = load_data()
    if not data:
        await ctx.send("아직 복권을 가진 유저가 없습니다! 시뮬레이션을 실행할 수 없습니다.")
        return

    all_tickets = [(user, ticket) for user, tickets in data.items() for ticket in tickets]
    simulated_winners = random.sample(all_tickets, min(3, len(all_tickets)))

    sim_msgs = [
        f"🔮 **1등 (시뮬레이션):** <@{simulated_winners[0][0]}> 🎟️ {simulated_winners[0][1]}",
        f"🔮 **2등 (시뮬레이션):** <@{simulated_winners[1][0]}> 🎟️ {simulated_winners[1][1]}" if len(simulated_winners) > 1 else "",
        f"🔮 **3등 (시뮬레이션):** <@{simulated_winners[2][0]}> 🎟️ {simulated_winners[2][1]}" if len(simulated_winners) > 2 else "",
    ]
    
    await ctx.send("🎰 **복권 시뮬레이션 결과 (연습용)** 🎰\n" + "\n".join(sim_msgs))

# 봇 실행
bot.run(TOKEN)
